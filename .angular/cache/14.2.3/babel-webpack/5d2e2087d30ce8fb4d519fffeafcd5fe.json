{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { tap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../user/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.base_url = environment.base_url;\n      this.user = new BehaviorSubject(null);\n    }\n\n    signin(login, password) {\n      return this.http.post(`${this.base_url}/auth/signin`, {\n        login,\n        password\n      }).pipe(tap(resData => {\n        const user = new User(resData.token, resData.login, resData.id);\n        this.user.next(user);\n        sessionStorage.setItem('userData', JSON.stringify(user));\n      }));\n    }\n\n    signup(name, login, password) {\n      return this.http.post(`${this.base_url}/auth/signup`, {\n        name,\n        login,\n        password\n      });\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(sessionStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData._token, userData.login, userData.id);\n      this.user.next(loadedUser);\n    }\n\n    logOut() {\n      this.user.next(null);\n      this.router.navigate(['']);\n      sessionStorage.clear();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}